using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using Microsoft.Win32;
using System.IO;
using Xceed.Words.NET;
using System.Windows.Xps.Packaging;
using System;
using System.Collections.Generic;
using System.Security.Cryptography;
using System.Text;
using System.Numerics;
using System.Linq;
using System.Buffers.Text;
//using Xceed.Document.NET;

namespace BTL_ATBM_1
{
    /// <summary>
    /// interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {

        }

        string fileContent;

        private void readTxt(string filePath, Button btn)
        {
            fileContent = File.ReadAllText(filePath);
            //RichTextBox a = x as RichTextBox;
            if (btn.Name.ToString() == "layfile1")
            {
                vbky1.Document.Blocks.Clear();
                vbky1.Document.Blocks.Add(new Paragraph(new Run(fileContent)));
            }
            else if(btn.Name.ToString() == "layfile2")
            {
                vbky2.Document.Blocks.Clear();
                vbky2.Document.Blocks.Add(new Paragraph(new Run(fileContent)));
            }
        }
        /*private void readDocx(string filePath, Button btn)
        {
            using (DocX document = DocX.Load(filePath))
            {
                using (MemoryStream ms = new MemoryStream())
                {
                    document.SaveAs(ms);
                    ms.Seek(0, SeekOrigin.Begin);
                    XpsDocument xpsDoc = DocX.ConvertToXps(ms);
                    FixedDocumentSequence fds = xpsDoc.GetFixedDocumentSequence();
                    .Document = fds;
                }
            }
        }*/

        private void layfile_Click(object sender, RoutedEventArgs e)
        {
            Button btn = sender as Button;
            string filePath;
            OpenFileDialog openFileDialog= new OpenFileDialog();
            if(openFileDialog.ShowDialog() == true)
            {
                filePath = openFileDialog.FileName;
                string fileExtension = System.IO.Path.GetExtension(filePath);
                if(fileExtension == ".txt")
                {
                    //vbky1.Text = fileContent;
                    readTxt(filePath, btn);
                }
                else if(fileExtension == ".docx")
                {
                    //readDocx(filePath, btn);
                }
                else
                {
                    MessageBox.Show("Khong ho tro file nay");
                }
            }
            else
            {
                MessageBox.Show("Khong tim thay file");
            }
        }
        private void kybtn_Click(object sender, RoutedEventArgs e)
        {
            taokhoa();
            hamky();
            content_daky = String.Format("Gamma = " + gamma + "\n" + "Sigma = " + sigma);
            vbchuky1.Clear();
            vbchuky1.Text = content_daky;
        }

        private void chuyenbtn_Click(object sender, RoutedEventArgs e)
        {
            vbchuky2.Clear();
            vbchuky2.Text = content_daky;
        }
        private void ktbtn_Click(object sender, RoutedEventArgs e)
        {
            string[] tachchuoil1 = vbchuky2.Text.Split("=");
            string[] tachchuoil2 = tachchuoil1[1].Split("Sigma");
            key_gamma = BigInteger.Parse(tachchuoil2[0].Trim());
            key_sigma = BigInteger.Parse(tachchuoil1[2].Trim());
            beta = binhPhuongVaNhan(alpha, a, p);
            var kt1 = (binhPhuongVaNhan(beta, key_gamma, p) * binhPhuongVaNhan(key_gamma, key_sigma, p)) % p;
            var kt2 = binhPhuongVaNhan(alpha, x, p);
            if (kt1 == kt2)
            {
                checktxt.Text = "Đúng";
            }
            else
            {
                checktxt.Text = "Sai";
            }
        }

        string content_daky;
        BigInteger x;
        BigInteger p;
        BigInteger alpha;
        BigInteger a;
        BigInteger beta;
        BigInteger k;
        BigInteger gamma;
        BigInteger sigma;
        Random random = new Random();

        BigInteger key_gamma;
        BigInteger key_sigma;

        private void taokhoa()
        {
            do
            {
                p = LayNgauNhienSoNguyenLon(BigInteger.One << 15, BigInteger.One << 16);
                if (ktsnt(p)) break;
            } while(true);
            
            alpha = LayNgauNhienSoNguyenLon(BigInteger.One, p - 1);
            a = LayNgauNhienSoNguyenLon(new BigInteger(2), p - 2);
            beta = binhPhuongVaNhan(alpha, a, p);
            MessageBox.Show("p: " + p + "\n" + "al: " + alpha + "\n" + "a: " + a);
            do
            {
                k = LayNgauNhienSoNguyenLon(BigInteger.One, p - 2);
                if (gcd(p - 1, k) == 1) break;
            } while (true);
        }

        private void hamky()
        {
            fileContent = new TextRange(vbky1.Document.ContentStart, vbky1.Document.ContentEnd).Text;
            x = hambam(fileContent);
            gamma = binhPhuongVaNhan(alpha, k, p);
            sigma = ((x - a * gamma) * nghichdao(k, p - 1)) % (p - 1);
        }

        BigInteger hambam(string s)
        {
            SHA256 sha256 = SHA256.Create();
            byte[] hashBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(s));
            /*string digest = Convert.ToBase64String(hashBytes);
            var dc = Convert.FromBase64String(digest);
            var z = new BigInteger(dc.Concat(new byte[] { 0x00 }).ToArray());
            return z;*/
            MessageBox.Show("" + new BigInteger(hashBytes));
            return new BigInteger(hashBytes);
            
        }

        BigInteger LayNgauNhienSoNguyenLon(BigInteger min, BigInteger max)
        {
            byte[] bytes = max.ToByteArray();
            BigInteger result;
            do
            {
                random.NextBytes(bytes);
                bytes[bytes.Length - 1] &= (byte)0x7F;
                result = new BigInteger(bytes);
            }
            while (result < min || result > max);
            return result;
            //long z = random.Next(min, max);
            //return 
        }

        bool ktsnt(BigInteger n, int k = 10)
        {
            if (n < 2)
                return false;

            foreach (int p in new int[] { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29 })
            {
                if (n % p == 0)
                    return n == p;
            }

            BigInteger r = 0;
            BigInteger s = n - 1;

            while (s % 2 == 0)
            {
                r += 1;
                s /= 2;
            }

            for (int i = 0; i < k; i++)
            {
                BigInteger a = LayNgauNhienSoNguyenLon(2, n - 2);
                BigInteger x = BigInteger.ModPow(a, s, n);

                if (x == 1 || x == n - 1)
                    continue;

                for (int j = 0; j < r - 1; j++)
                {
                    x = BigInteger.ModPow(x, 2, n);

                    if (x == n - 1)
                        break;
                }

                if (x != n - 1)
                    return false;
            }

            return true;
        }

        BigInteger nghichdao(BigInteger a, BigInteger m)
        {
            BigInteger r, q, y = 0, y0 = 0, y1 = 1;
            while(a > 0)
            {
                r = m % a;
                if (r == 0) break;
                q = m / a;
                y = y0 - y1 * q;
                m = a;
                a = r;
                y0 = y1;
                y1 = y;
            }
            if (a > 1)
            {
                return -1;
            }
            else
            {
                if (y > 0) return y;
                else
                {
                    while(y < 0)
                    {
                        y += m;
                    }
                    return y;
                }
            }
        }

        BigInteger gcd(BigInteger a, BigInteger b)
        {
            BigInteger r;
            if (a == 0)
                return b;
            if (b == 0)
                return a;
            while(b > 0)
            {
                r = a % b;
                a = b;
                b = r;
            }
            return a;
        }

        BigInteger binhPhuongVaNhan(BigInteger x, BigInteger n, BigInteger m)
        {
            BigInteger kq = 1;
            var a = new List<BigInteger>();
            while (n > 0)
            {
                a.Add(n % 2);
                n /= 2;
            }
            for(int i = a.Count - 1; i >= 0; i--)
            {
                kq = (kq * kq) % m;
                if (a[i] == 1)
                {
                    kq = (kq * x) % m;
                }
            }
            return kq;
        }

        private void textthu_Click(object sender, RoutedEventArgs e)
        {
            //taokhoa();
            //binhPhuongVaNhan(37, 27, 101);
            /*string value = new TextRange(vbky1.Document.ContentStart, vbky1.Document.ContentEnd).Text;
            MessageBox.Show(value);*/
        }

    }
}
